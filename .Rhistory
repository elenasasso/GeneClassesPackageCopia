dati <- matrix(c(23, 6, 61, 5, 10, 77), nrow = 3, byrow = FALSE)
# Aggiungere nomi alle righe e colonne
rownames(dati) <- c("Malati con PP", "Malati senza PP", "Sani")
colnames(dati) <- c("Non vaccinati", "Vaccinati")
rm(list= ls())
dati <- matrix(c(23, 6, 61, 5, 10, 77), nrow = 3, byrow = FALSE)
# Aggiungere nomi alle righe e colonne
rownames(dati) <- c("Malati con PP", "Malati senza PP", "Sani")
colnames(dati) <- c("Non vaccinati", "Vaccinati")
View(dati)
chisq.test(dati, correct = FALSE)
a <- chisq.test(dati, correct = FALSE)
a$expected
a
GBGS_dataset <- read.csv("C:/Users/39388/Desktop/Biostatistics/Teoria/GBGS_dataset.txt", sep="")
View(GBGS_dataset)
library(survminer)
library(survival)
Surv(df$stime, df$status)
Surv(GBGS_dataset$stime, GBGS_dataset$status)
fit_KM <- survfit(a ~ grade, data = GBGS_dataset)
fit_KM <- survfit(Surv(GBGS_dataset$stime, GBGS_dataset$status) ~ grade, data = GBGS_dataset)
summary(fit_KM)
summary_fit_KM$surv[summary_fit_KM$surv <= 0.5]
b <- summary(fit_KM)
summary_fit_KM$surv[b$surv <= 0.5]
b$surv[b$surv <= 0.5]
b$table["median"]
b$table[,"median"]
cum <- 1 - fit_KM$surv
cum
# Supponendo che GBGS_dataset sia già caricato
fit_KM <- survfit(Surv(GBGS_dataset$stime, GBGS_dataset$status) ~ grade, data = GBGS_dataset)
# Ottenere il riepilogo dell'oggetto survfit
summary_fit_KM <- summary(fit_KM)
# Verificare i livelli del fattore 'grade'
levels(GBGS_dataset$grade)
# Estrarre i dati per il gruppo di interesse (grade 1)
grade_1_index <- which(summary_fit_KM$strata == "grade=1")
# Estrarre i tempi e le probabilità di sopravvivenza per il gruppo grade 1
times_grade_1 <- summary_fit_KM$time[grade_1_index]
survival_prob_grade_1 <- summary_fit_KM$surv[grade_1_index]
# Identificare il tempo più vicino a 5 anni (supponendo che il tempo sia espresso in anni)
target_time <- 5
closest_time_index <- which.min(abs(times_grade_1 - target_time))
# Calcolare la probabilità cumulativa di fallimento a 5 anni
cumulative_failure_prob_5_years <- 1 - survival_prob_grade_1[closest_time_index]
# Mostrare il risultato
cumulative_failure_prob_5_years
b$table
summary(b, times = 5)
summary(fit_KM, times = 5)
summary(fit_KM, times = 5*365)
survdiff(Surv(GBGS_dataset$stime, GBGS_dataset$status) ~ grade, data = GBGS_dataset
survdiff(Surv(GBGS_dataset$stime, GBGS_dataset$status) ~ grade, data = GBGS_dataset)
survdiff(Surv(GBGS_dataset$stime, GBGS_dataset$status) ~ grade, data = GBGS_dataset)
fit_cox <- coxph(Surv(Stime, status) ~ age + grade + size,
data= GBGS_dataset)
fit_cox <- coxph(Surv(stime, status) ~ age + grade + size,
data= GBGS_dataset)
summary(fit_cox)
GBGS_dataset$grade <- as.factor(GBGS_dataset$grade)
a <- Surv(GBGS_dataset$stime, GBGS_dataset$status)
fit_KM <- survfit(Surv(GBGS_dataset$stime, GBGS_dataset$status) ~ grade, data = GBGS_dataset)
b <- summary(fit_KM)
b$surv[b$surv <= 0.5]
b$table[,"median"]
b$table
summary(fit_KM, times = 5*365)
survdiff(Surv(GBGS_dataset$stime, GBGS_dataset$status) ~ grade, data = GBGS_dataset)
fit_cox <- coxph(Surv(stime, status) ~ age + grade + size,
data= GBGS_dataset)
summary(fit_cox)
exp(0.014267*10)
fit_exp <- survreg(Surv(stime, status) ~  ., data = GBGS_dataset,
dist = "exponential")
summary(fit_exp)
exp(-1 * coef(fit_exp))
####################2b
#Load R packages MLmetrics, pROC
library(MLmetrics)
library(pROC)
data_polyps <- read.csv("C:/Users/39388/Downloads/data_polyps.txt", sep="")
View(data_polyps)
mod.glm <- glm(colon_cancer ~ age + baseline + age + treatment, family=binomial(link=logit), data = data_polyps)
summary(mod.glm)
data_polyps$treatment <- as.factor(data_polyps$treatment)
data_polyps$sex <- as.factor(data_polyps$sex)
mod.glm <- glm(colon_cancer ~ age + baseline + age + treatment, family=binomial(link=logit), data = data_polyps)
summary(mod.glm)
mod.glm <- glm(colon_cancer ~ age + baseline + sex + treatment, family=binomial(link=logit), data = data_polyps)
summary(mod.glm)
mod.glm <- glm(colon_cancer ~ age + baseline + treatment, family=binomial(link=logit), data = data_polyps)
summary(mod.glm)
mod.glm1 <- glm(colon_cancer ~ age + baseline + treatment, family=binomial(link=logit), data = data_polyps)
mod.glm <- glm(colon_cancer ~ age + baseline + sex + treatment, family=binomial(link=logit), data = data_polyps)
anova(mod.glm, mod.glm1, test="LRT")
a <- anova(mod.glm, mod.glm1, test="LRT")
summary(a)
a <- anova(mod.glm, mod.glm1, test="LRT")
a
summary(mod.glm1)
exp(coef(mod.glm1))
exp(coef(3*mod.glm1))
exp(3*coef(mod.glm1))
coef(mod.glm1)
p_threshold = 0.5
Y.hat <- ifelse(mod.glm1$fitted.values<p_threshold, 0, 1)
Y.hat # predicted values
confusion.matrix <- table(Predicted = Y.hat, Observed = chd$CHD)
confusion.matrix
confusion.matrix <- table(Predicted = Y.hat, Observed = data_polyps$colon_cancer)
confusion.matrix
Accuracy(confusion.matrix)
Accuracy <- (28 + 25 ) / (28+25+5+2)
Accuracy
ROC_curve <- roc(response = data_polyps$colon_cancer, predictor = mod.glm1$fitted.values,
levels = c('0','1'),
smooth=FALSE, plot=TRUE, print.auc=TRUE, auc.polygon=TRUE,
main="ROC Curve")
p <- c(0.0013, 0.029, 0.0054, 0.0013, 0.0005, 0.0091, 0.0017, 0.085, 0.0068, 0.0040)
p.adjust(p, method = "Holm")
p.adjust(p, method = "holm")
dati <- matrix(c(23, 27, 39, 45, 50, 54, 61,
9.5, 7.8, 31.4, 27.4, 42.0, 29.1, 41.1),
nrow = 2, byrow = TRUE)
# Aggiunta di nomi alle righe e alle colonne
rownames(dati) <- c("Età (anni)", "Grasso corporeo (%)")
colnames(dati) <- paste("Adulto", 1:7, sep = " ")
dat
dati
cor.test(dati,method="kendall")
dati <- matrix(c(23, 27, 39, 45, 50, 54, 61,
9.5, 7.8, 31.4, 27.4, 42.0, 29.1, 41.1),
nrow = 2, byrow = TRUE)
# Aggiunta di nomi alle righe e alle colonne
rownames(dati) <- c("age", "Grasso")
colnames(dati) <- paste("Adulto", 1:7, sep = " ")
dati
cor.test(dati$age, dati$Grasso,method="kendall")
dati <- data.frame(
Età = c(23, 27, 39, 45, 50, 54, 61),
Grasso_Corporeo = c(9.5, 7.8, 31.4, 27.4, 42.0, 29.1, 41.1)
)
dati <- data.frame(
age = c(23, 27, 39, 45, 50, 54, 61),
Grasso= c(9.5, 7.8, 31.4, 27.4, 42.0, 29.1, 41.1)
)
cor.test(dati$age, dati$Grasso,method="kendall")
#####################à
dati <- data.frame(
Madre = rep(c("Non Vaccinata", "Vaccinata"), each = 2),
Bambino = rep(c("Ospedalizzato", "Non ospedalizzato"), 2),
Frequenza = c(45, 15, 22, 38)
)
dati
tabella_contingenza <- xtabs(Frequenza ~ Bambino + Madre, data = dati)
tabella_contingenza
chisq.test(tabella_contingenza)
a <- chisq.test(tabella_contingenza)
a$observed
a$expected
data_depression <- read.csv("C:/Users/39388/Downloads/data_depression.txt", sep="")
View(data_depression)
library(survival)
library(survminer)
fit <- survfit(Surv(Time, Recurrence) ~ 1, data = data_depression)
fit <- survfit(Surv(Time, Recurrence) ~ Gender, data = data_depression)
summary(fit)
fit$table[,"median"]
fit$surv[b$surv <= 40]
fit$surv[b$surv <= 40]
fit$surv[fit$surv <= 40]
fit$table[,"median"]
fit$surv[fit$surv <= 0.05]
female_40_days <- summary_fit$surv[summary_fit$strata == "Gender=Female" & summary_fit$time == 40]
summary_fit <- summary(fit)
female_40_days <- summary_fit$surv[summary_fit$strata == "Gender=Female" & summary_fit$time == 40]
female_40_days
fit$surv[fit$surv <= 40]
fit$table[,"median"]
b$table[,"median"]
b <- summary(fit)
b$table[,"median"]
b$surv[b$surv <= 40]
b$surv[b$surv == 40]
b$table[,"median"]
# Filter for female patients
female_indices <- which(b$strata == "Gender=Female")
# Extract times and survival probabilities for female patients
female_times <- b$time[female_indices]
female_surv <- b$surv[female_indices]
# Find the closest time point less than or equal to 40 days
closest_time_index <- which.max(female_times[female_times <= 40])
closest_time <- female_times[closest_time_index]
survival_rate_at_40_days <- female_surv[closest_time_index]
# Print the survival rate at 40 days for female patients
survival_rate_at_40_days
b
######
survdiff(Surv(Time, Rtatus) ~ Acute6, data = data_depression)
######
survdiff(Surv(Time, Recurrence) ~ Acute6, data = data_depression)
cox <- coxph(Surv(Time, Recurrence) ~ Age + Gender + Treat, data = data_depression)
summary(cox)
Treat1o0 <- ifelse(data_depression$Treat == "Control", 1, 0)
cox <- coxph(Surv(Time, Recurrence) ~ Age + Gender + Treat + Treat1o0, data = data_depression)
summary(cox)
data_depression$Treat1o0 <- ifelse(data_depression$Treat == "Control", 1, 0)
cox <- coxph(Surv(Time, Recurrence) ~ Age + Gender + Treat + Treat1o0, data = data_depression)
summary(cox)
cox <- coxph(Surv(Time, Recurrence) ~ Age + Gender + Treat + Treat1o0, data = data_depression)
summary(cox)
data_depression$Treat1o0 <- ifelse(data_depression$Treat == "Control", 1, 0)
cox <- coxph(Surv(Time, Recurrence) ~ Age + Gender + Treat + Treat1o0, data = data_depression)
summary(cox)
cox <- coxph(Surv(Time, Recurrence) ~ Age + Gender + Treat1o0, data = data_depression)
summary(cox)
cox <- coxph(Surv(Time, Recurrence) ~ Age + Gender + Treat, data = data_depression)
summary(cox)
coxph(cox)
cox.zph(cox)
#######################
new_patient <- data.frame(Age = 25, Gender = "Male", Treatment = "Lithium")
#######################
new_patient <- data.frame(Age = 25, Gender = "Male", Treat = "Lithium")
surv_fit <- survfit(cox, newdata = new_patient)
data_depression$Gender <- factor(data_depression$Gender, levels = c("Male", "Female"))
data_depression$Treatment <- factor(data_depression$Treatment, levels = c("Lithium", "Other"))
data_depression$Gender <- as.factor(data_depression$Gender)
data_depression$Treatment <- factor(data_depression$Treat)
surv_fit <- survfit(cox, newdata = new_patient)
data_depression$Gender <- as.factor(data_depression$Gender)
data_depression$Treatment <- as.factor(data_depression$Treat)
#######################
new_patient <- data.frame(Age = 25, Gender = 1, Treat = "Lithium")
surv_fit <- survfit(cox, newdata = new_patient)
rm(data_depression)
data_depression <- read.csv("C:/Users/39388/Downloads/data_depression.txt", sep="")
View(data_depression)
data_depression$Gender <- as.factor(data_depression$Gender)
data_depression$Treatment <- as.factor(data_depression$Treat)
#######################
new_patient <- data.frame(Age = 25, Gender = 1, Treat = "Lithium")
surv_fit <- survfit(cox, newdata = new_patient)
rm(data_depression)
data_depression <- read.csv("C:/Users/39388/Downloads/data_depression.txt", sep="")
View(data_depression)
#######################
new_patient <- data.frame(Age = 25, Gender = 1, Treat = "Lithium")
surv_fit <- survfit(cox, newdata = new_patient)
# Estrarre la probabilità di sopravvivenza a 30 giorni
survival_30_days <- summary(surv_fit, times = 30)$surv
survival_30_days
library(MLmetrics)
library(pROC)
data_remission <- read.csv("C:/Users/39388/Downloads/data_remission.txt", sep="")
View(data_remission)
mod.glm <- glm(remission ~ Age + tumorsize + CancerStage + IL6, family=binomial(link=logit), data = data_remission)
summary(mod.glm)
logit_summary <- summary(mod.glm)  # 'model_logit' è il tuo modello di regressione logistica
# Ottieni i coefficienti stimati
coefficients <- logit_summary$coefficients[, "Estimate"]
# Calcola gli Odds Ratio (OR) come l'esponenziale dei coefficienti
OR <- exp(coefficients)
OR
remission_proportion <- sum(data_remission$remission == 1) / nrow(data_remission)
Y.hat <- ifelse(mod.glm$fitted.values<remission_proportion, 0, 1)
Y.hat # predicted values
confusion.matrix <- table(Predicted = Y.hat, Observed = data_remission$remission)
confusion.matrix
ROC_curve <- roc(response = data_remission$remission, predictor = mod.glm$fitted.values,
levels = c('0','1'),
smooth=FALSE, plot=TRUE, print.auc=TRUE, auc.polygon=TRUE,
main="ROC Curve")
library(installR9
)
library(installR)
install.packages("installr")
library(installR)
library(installr)
updateR()
q()
library(GeneClassesPackageCopia)
setwd("C:/Users/39388/Desktop/GenesClasses")
library(devtools)
#   '\\documentclass{article}',
#   '\\begin{document}', 'Hello world!', '\\end{document}'
# ), 'test.tex')
tinytex::pdflatex('test.tex')
tinytex::tlmgr_install(c("latexmk", "xetex", "bibtex", "pdftex"))
--all
tinytex::tlmgr_search("/texmf-dist/doc/")
tinytex::tinytex_root()
# writeLines(c(
#   '\\documentclass{article}',
#   '\\begin{document}', 'Hello world!', '\\end{document}'
# ), 'test.tex')
tinytex::pdflatex('test.tex')
install.packages('tinytex')
tinytex::install_tinytex()
tinytex::install_tinytex()
library("tinytex")
# writeLines(c(
#   '\\documentclass{article}',
#   '\\begin{document}', 'Hello world!', '\\end{document}'
# ), 'test.tex')
tinytex::pdflatex('test.tex')
writeLines(c(
'\\documentclass{article}',
'\\begin{document}', 'Hello world!', '\\end{document}'
), 'test.tex')
tinytex::pdflatex('test.tex')
