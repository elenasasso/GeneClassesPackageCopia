# Estrarre i tempi e le probabilità di sopravvivenza per il gruppo grade 1
times_grade_1 <- summary_fit_KM$time[grade_1_index]
survival_prob_grade_1 <- summary_fit_KM$surv[grade_1_index]
# Identificare il tempo più vicino a 5 anni (supponendo che il tempo sia espresso in anni)
target_time <- 5
closest_time_index <- which.min(abs(times_grade_1 - target_time))
# Calcolare la probabilità cumulativa di fallimento a 5 anni
cumulative_failure_prob_5_years <- 1 - survival_prob_grade_1[closest_time_index]
# Mostrare il risultato
cumulative_failure_prob_5_years
b$table
summary(b, times = 5)
summary(fit_KM, times = 5)
summary(fit_KM, times = 5*365)
survdiff(Surv(GBGS_dataset$stime, GBGS_dataset$status) ~ grade, data = GBGS_dataset
survdiff(Surv(GBGS_dataset$stime, GBGS_dataset$status) ~ grade, data = GBGS_dataset)
survdiff(Surv(GBGS_dataset$stime, GBGS_dataset$status) ~ grade, data = GBGS_dataset)
fit_cox <- coxph(Surv(Stime, status) ~ age + grade + size,
data= GBGS_dataset)
fit_cox <- coxph(Surv(stime, status) ~ age + grade + size,
data= GBGS_dataset)
summary(fit_cox)
GBGS_dataset$grade <- as.factor(GBGS_dataset$grade)
a <- Surv(GBGS_dataset$stime, GBGS_dataset$status)
fit_KM <- survfit(Surv(GBGS_dataset$stime, GBGS_dataset$status) ~ grade, data = GBGS_dataset)
b <- summary(fit_KM)
b$surv[b$surv <= 0.5]
b$table[,"median"]
b$table
summary(fit_KM, times = 5*365)
survdiff(Surv(GBGS_dataset$stime, GBGS_dataset$status) ~ grade, data = GBGS_dataset)
fit_cox <- coxph(Surv(stime, status) ~ age + grade + size,
data= GBGS_dataset)
summary(fit_cox)
exp(0.014267*10)
fit_exp <- survreg(Surv(stime, status) ~  ., data = GBGS_dataset,
dist = "exponential")
summary(fit_exp)
exp(-1 * coef(fit_exp))
####################2b
#Load R packages MLmetrics, pROC
library(MLmetrics)
library(pROC)
data_polyps <- read.csv("C:/Users/39388/Downloads/data_polyps.txt", sep="")
View(data_polyps)
mod.glm <- glm(colon_cancer ~ age + baseline + age + treatment, family=binomial(link=logit), data = data_polyps)
summary(mod.glm)
data_polyps$treatment <- as.factor(data_polyps$treatment)
data_polyps$sex <- as.factor(data_polyps$sex)
mod.glm <- glm(colon_cancer ~ age + baseline + age + treatment, family=binomial(link=logit), data = data_polyps)
summary(mod.glm)
mod.glm <- glm(colon_cancer ~ age + baseline + sex + treatment, family=binomial(link=logit), data = data_polyps)
summary(mod.glm)
mod.glm <- glm(colon_cancer ~ age + baseline + treatment, family=binomial(link=logit), data = data_polyps)
summary(mod.glm)
mod.glm1 <- glm(colon_cancer ~ age + baseline + treatment, family=binomial(link=logit), data = data_polyps)
mod.glm <- glm(colon_cancer ~ age + baseline + sex + treatment, family=binomial(link=logit), data = data_polyps)
anova(mod.glm, mod.glm1, test="LRT")
a <- anova(mod.glm, mod.glm1, test="LRT")
summary(a)
a <- anova(mod.glm, mod.glm1, test="LRT")
a
summary(mod.glm1)
exp(coef(mod.glm1))
exp(coef(3*mod.glm1))
exp(3*coef(mod.glm1))
coef(mod.glm1)
p_threshold = 0.5
Y.hat <- ifelse(mod.glm1$fitted.values<p_threshold, 0, 1)
Y.hat # predicted values
confusion.matrix <- table(Predicted = Y.hat, Observed = chd$CHD)
confusion.matrix
confusion.matrix <- table(Predicted = Y.hat, Observed = data_polyps$colon_cancer)
confusion.matrix
Accuracy(confusion.matrix)
Accuracy <- (28 + 25 ) / (28+25+5+2)
Accuracy
ROC_curve <- roc(response = data_polyps$colon_cancer, predictor = mod.glm1$fitted.values,
levels = c('0','1'),
smooth=FALSE, plot=TRUE, print.auc=TRUE, auc.polygon=TRUE,
main="ROC Curve")
p <- c(0.0013, 0.029, 0.0054, 0.0013, 0.0005, 0.0091, 0.0017, 0.085, 0.0068, 0.0040)
p.adjust(p, method = "Holm")
p.adjust(p, method = "holm")
dati <- matrix(c(23, 27, 39, 45, 50, 54, 61,
9.5, 7.8, 31.4, 27.4, 42.0, 29.1, 41.1),
nrow = 2, byrow = TRUE)
# Aggiunta di nomi alle righe e alle colonne
rownames(dati) <- c("Età (anni)", "Grasso corporeo (%)")
colnames(dati) <- paste("Adulto", 1:7, sep = " ")
dat
dati
cor.test(dati,method="kendall")
dati <- matrix(c(23, 27, 39, 45, 50, 54, 61,
9.5, 7.8, 31.4, 27.4, 42.0, 29.1, 41.1),
nrow = 2, byrow = TRUE)
# Aggiunta di nomi alle righe e alle colonne
rownames(dati) <- c("age", "Grasso")
colnames(dati) <- paste("Adulto", 1:7, sep = " ")
dati
cor.test(dati$age, dati$Grasso,method="kendall")
dati <- data.frame(
Età = c(23, 27, 39, 45, 50, 54, 61),
Grasso_Corporeo = c(9.5, 7.8, 31.4, 27.4, 42.0, 29.1, 41.1)
)
dati <- data.frame(
age = c(23, 27, 39, 45, 50, 54, 61),
Grasso= c(9.5, 7.8, 31.4, 27.4, 42.0, 29.1, 41.1)
)
cor.test(dati$age, dati$Grasso,method="kendall")
#####################à
dati <- data.frame(
Madre = rep(c("Non Vaccinata", "Vaccinata"), each = 2),
Bambino = rep(c("Ospedalizzato", "Non ospedalizzato"), 2),
Frequenza = c(45, 15, 22, 38)
)
dati
tabella_contingenza <- xtabs(Frequenza ~ Bambino + Madre, data = dati)
tabella_contingenza
chisq.test(tabella_contingenza)
a <- chisq.test(tabella_contingenza)
a$observed
a$expected
data_depression <- read.csv("C:/Users/39388/Downloads/data_depression.txt", sep="")
View(data_depression)
library(survival)
library(survminer)
fit <- survfit(Surv(Time, Recurrence) ~ 1, data = data_depression)
fit <- survfit(Surv(Time, Recurrence) ~ Gender, data = data_depression)
summary(fit)
fit$table[,"median"]
fit$surv[b$surv <= 40]
fit$surv[b$surv <= 40]
fit$surv[fit$surv <= 40]
fit$table[,"median"]
fit$surv[fit$surv <= 0.05]
female_40_days <- summary_fit$surv[summary_fit$strata == "Gender=Female" & summary_fit$time == 40]
summary_fit <- summary(fit)
female_40_days <- summary_fit$surv[summary_fit$strata == "Gender=Female" & summary_fit$time == 40]
female_40_days
fit$surv[fit$surv <= 40]
fit$table[,"median"]
b$table[,"median"]
b <- summary(fit)
b$table[,"median"]
b$surv[b$surv <= 40]
b$surv[b$surv == 40]
b$table[,"median"]
# Filter for female patients
female_indices <- which(b$strata == "Gender=Female")
# Extract times and survival probabilities for female patients
female_times <- b$time[female_indices]
female_surv <- b$surv[female_indices]
# Find the closest time point less than or equal to 40 days
closest_time_index <- which.max(female_times[female_times <= 40])
closest_time <- female_times[closest_time_index]
survival_rate_at_40_days <- female_surv[closest_time_index]
# Print the survival rate at 40 days for female patients
survival_rate_at_40_days
b
######
survdiff(Surv(Time, Rtatus) ~ Acute6, data = data_depression)
######
survdiff(Surv(Time, Recurrence) ~ Acute6, data = data_depression)
cox <- coxph(Surv(Time, Recurrence) ~ Age + Gender + Treat, data = data_depression)
summary(cox)
Treat1o0 <- ifelse(data_depression$Treat == "Control", 1, 0)
cox <- coxph(Surv(Time, Recurrence) ~ Age + Gender + Treat + Treat1o0, data = data_depression)
summary(cox)
data_depression$Treat1o0 <- ifelse(data_depression$Treat == "Control", 1, 0)
cox <- coxph(Surv(Time, Recurrence) ~ Age + Gender + Treat + Treat1o0, data = data_depression)
summary(cox)
cox <- coxph(Surv(Time, Recurrence) ~ Age + Gender + Treat + Treat1o0, data = data_depression)
summary(cox)
data_depression$Treat1o0 <- ifelse(data_depression$Treat == "Control", 1, 0)
cox <- coxph(Surv(Time, Recurrence) ~ Age + Gender + Treat + Treat1o0, data = data_depression)
summary(cox)
cox <- coxph(Surv(Time, Recurrence) ~ Age + Gender + Treat1o0, data = data_depression)
summary(cox)
cox <- coxph(Surv(Time, Recurrence) ~ Age + Gender + Treat, data = data_depression)
summary(cox)
coxph(cox)
cox.zph(cox)
#######################
new_patient <- data.frame(Age = 25, Gender = "Male", Treatment = "Lithium")
#######################
new_patient <- data.frame(Age = 25, Gender = "Male", Treat = "Lithium")
surv_fit <- survfit(cox, newdata = new_patient)
data_depression$Gender <- factor(data_depression$Gender, levels = c("Male", "Female"))
data_depression$Treatment <- factor(data_depression$Treatment, levels = c("Lithium", "Other"))
data_depression$Gender <- as.factor(data_depression$Gender)
data_depression$Treatment <- factor(data_depression$Treat)
surv_fit <- survfit(cox, newdata = new_patient)
data_depression$Gender <- as.factor(data_depression$Gender)
data_depression$Treatment <- as.factor(data_depression$Treat)
#######################
new_patient <- data.frame(Age = 25, Gender = 1, Treat = "Lithium")
surv_fit <- survfit(cox, newdata = new_patient)
rm(data_depression)
data_depression <- read.csv("C:/Users/39388/Downloads/data_depression.txt", sep="")
View(data_depression)
data_depression$Gender <- as.factor(data_depression$Gender)
data_depression$Treatment <- as.factor(data_depression$Treat)
#######################
new_patient <- data.frame(Age = 25, Gender = 1, Treat = "Lithium")
surv_fit <- survfit(cox, newdata = new_patient)
rm(data_depression)
data_depression <- read.csv("C:/Users/39388/Downloads/data_depression.txt", sep="")
View(data_depression)
#######################
new_patient <- data.frame(Age = 25, Gender = 1, Treat = "Lithium")
surv_fit <- survfit(cox, newdata = new_patient)
# Estrarre la probabilità di sopravvivenza a 30 giorni
survival_30_days <- summary(surv_fit, times = 30)$surv
survival_30_days
library(MLmetrics)
library(pROC)
data_remission <- read.csv("C:/Users/39388/Downloads/data_remission.txt", sep="")
View(data_remission)
mod.glm <- glm(remission ~ Age + tumorsize + CancerStage + IL6, family=binomial(link=logit), data = data_remission)
summary(mod.glm)
logit_summary <- summary(mod.glm)  # 'model_logit' è il tuo modello di regressione logistica
# Ottieni i coefficienti stimati
coefficients <- logit_summary$coefficients[, "Estimate"]
# Calcola gli Odds Ratio (OR) come l'esponenziale dei coefficienti
OR <- exp(coefficients)
OR
remission_proportion <- sum(data_remission$remission == 1) / nrow(data_remission)
Y.hat <- ifelse(mod.glm$fitted.values<remission_proportion, 0, 1)
Y.hat # predicted values
confusion.matrix <- table(Predicted = Y.hat, Observed = data_remission$remission)
confusion.matrix
ROC_curve <- roc(response = data_remission$remission, predictor = mod.glm$fitted.values,
levels = c('0','1'),
smooth=FALSE, plot=TRUE, print.auc=TRUE, auc.polygon=TRUE,
main="ROC Curve")
library(installR9
)
library(installR)
install.packages("installr")
library(installR)
library(installr)
updateR()
q()
library(GeneClassesPackageCopia)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("BiocCheck")
library(BiocCheck)
setwd("C:/Users/39388/Desktop/Scientific programming/R_SP/Progetto")
library(devtools)
devtools::install_github("https://github.com/elenasasso/GenesClasses")
library(GenesClasses)
brca1 <- CodingGene(id = 207233, Hugo_symbol = 'BRCA1', chrom = 'chr17', CDS_end = 41197695, CDS_start = 41258496, strand = '-')
id(brca1)
ComputeGeneLength(brca1)
lengthProduct(brca1)
id(brca1)
id(brca1)
id(brca1)
library(GenesClasses)
id(brca1)
id(brca1)
library(BiocCheck)
library(GenesClasses)
id(brca1)
getwd()
setwd("C:/Users/39388/Desktop/GenesClasses")
id(brca1)
"id"(brca1)
"id(brca1)"
?id(brca1)
.rs.restartR()
library(GenesClasses)
library(methods)
brca1 <- CodingGene(id = 207233, Hugo_symbol = 'BRCA1', chrom = 'chr17', CDS_end = 41197695, CDS_start = 41258496, strand = '-')
id(brca1)
isGeneric("id")      # dovrebbe restituire TRUE
isGeneric("id<-")    # dovrebbe restituire TRUE
showMethods("id")    # dovrebbe mostrare un metodo per la classe Gene
showMethods("id<-")  # dovrebbe mostrare un metodo per la classe Gene
library(mirt)
getAnywhere(id)
showMethods(GenesClasses:::id)
installed.packages()["GenesClasses", ]
installed.packages()["GenesClasses", ]
slot(Gene)
slotNames(Gene)
slotNames("Gene")
attributes <- slotNames("Genes")
for (attr in attributes) {
# Getter
cat(sprintf(
"#' @title Get %s attribute\n#' @description Getter for %s attribute of Genes.\n#' @param x An object of class Genes.\n#' @return The value of the %s attribute.\n#' @export\nsetGeneric('%s', function(x) standardGeneric('%s'))\n",
attr, attr, attr, attr, attr
), file = fileConn)
cat(sprintf(
"#' @export\nsetMethod('%s', 'Genes', function(x) x@%s)\n\n",
attr, attr
), file = fileConn)
# Setter
cat(sprintf(
"#' @title Set %s attribute\n#' @description Setter for %s attribute of Genes.\n#' @param x An object of class Genes.\n#' @param value The value to set for the %s attribute.\n#' @return The modified object.\n#' @export\nsetGeneric('%s<-', function(x, value) standardGeneric('%s<-'))\n",
attr, attr, attr, attr, attr
), file = fileConn)
cat(sprintf(
"#' @export\nsetMethod('%s<-', 'Genes', function(x, value) {\n  x@%s <- value\n  x\n})\n\n",
attr, attr
), file = fileConn)
}
for (attr in attributes) {
# Getter
cat(sprintf(
"#' @title Get %s attribute\n#' @description Getter for %s attribute of Genes.\n#' @param x An object of class Genes.\n#' @return The value of the %s attribute.\n#' @export\nsetGeneric('%s', function(x) standardGeneric('%s'))\n",
attr, attr, attr, attr, attr
))
cat(sprintf(
"#' @export\nsetMethod('%s', 'Genes', function(x) x@%s)\n\n",
attr, attr
))
# Setter
cat(sprintf(
"#' @title Set %s attribute\n#' @description Setter for %s attribute of Genes.\n#' @param x An object of class Genes.\n#' @param value The value to set for the %s attribute.\n#' @return The modified object.\n#' @export\nsetGeneric('%s<-', function(x, value) standardGeneric('%s<-'))\n",
attr, attr, attr, attr, attr
))
cat(sprintf(
"#' @export\nsetMethod('%s<-', 'Genes', function(x, value) {\n  x@%s <- value\n  x\n})\n\n",
attr, attr
))
}
slotNames(CodingGene)
slotNames("CodingGene")
unique_attributes_classB <- setdiff(slotNames("Gene"), slotNames("CodingGene"))
unique_attributes_classB
rm(unique_attributes_classB)
setdiff(slotNames("Gene"), slotNames("CodingGene"))
slotNames("Gene")
slotNames("CodingGene")
setdiff(slotNames("Gene"), slotNames("CodingGene"))
unique_attributes_codingGene <- setdiff(slotNames("CodingGene"), slotNames("Gene"))
print(unique_attributes_codingGene)
rm(unique_attributes_codingGene)
setdiff(slotNames("CodingGene"), slotNames("Gene"))
generateGetterSetterCode_for_Gene <- function(class_name, file_path) {
fileConn <- file(file_path, open = "wt")
attributes <- slotNames(class_name)
lapply(attributes, function(attr) {
# Getter
cat(sprintf(
"#' @title Get %s attribute\n#' @description Getter for %s attribute of %s class.\n#' @param x An object of class %s.\n#' @return The value of the %s attribute.\n#' @export\nsetGeneric('%s', function(x) standardGeneric('%s'))\n",
attr, attr, class_name, class_name, attr, attr, attr
), file = fileConn)
cat(sprintf(
"#' @export\nsetMethod('%s', '%s', function(x) x@%s)\n\n",
attr, class_name, attr
), file = fileConn)
# Setter
cat(sprintf(
"#' @title Set %s attribute\n#' @description Setter for %s attribute of %s class.\n#' @param x An object of class %s.\n#' @param value The value to set for the %s attribute.\n#' @return The modified object.\n#' @export\nsetGeneric('%s<-', function(x, value) standardGeneric('%s<-'))\n",
attr, attr, class_name, class_name, attr, attr, attr
), file = fileConn)
cat(sprintf(
"#' @export\nsetMethod('%s<-', '%s', function(x, value) {\n  x@%s <- value\n  x\n})\n\n",
attr, class_name, attr
), file = fileConn)
})
close(fileConn)
}
generateGetterSetterCode_for_Gene("Gene", "R/getters_setters_Gene.R")
setdiff(slotNames("lncRNA"), slotNames("Gene"))
setdiff(slotNames("lncRNA_Gene"), slotNames("Gene"))
setdiff(slotNames("miRNA_Gene"), slotNames("sncRNA_Gene"))
end(brca1)
brca1
start(brca1)
slotNames("Gene")
slotNames("Gene")[-c("start", "end")]
slotNames("Gene")[-c(5,6)]
setdiff(slotNames("Gene"), c("start", "end"))
setdiff(slotNames("CodingGene"), attributesGene)
attributesGene <- setdiff(slotNames("Gene"), c("start", "end"))
setdiff(slotNames("CodingGene"), attributesGene)
attributes <- setdiff(slotNames("CodingGene"), slotNames("Gene"))
attributes <- setdiff(attributes, c("start", "end"))
attributes
#' Gene
#'
#' A virtual class to represent a generic gene.
#'
#' @slot id A numeric value representing the gene ID.
#' @slot Hugo_symbol A character string representing the Hugo symbol of the
#' gene.
#' @slot description A character string describing the gene.
#' @slot chrom A character string representing the chromosome where the gene
#' is located.
#' @slot start A numeric value indicating the start position of the gene on the
#' chromosome.
#' @slot end A numeric value indicating the end position of the gene on the
#' chromosome.
#' @slot strand A character string indicating the strand of the gene ('+' or
#' '-').
#' @slot TSS A numeric value representing the transcription start site.
#' @slot TTS A numeric value representing the transcription termination site.
#' @slot number_exon A numeric value indicating the number of exons in the
#' gene.
#' @slot location A character string indicating the location of the gene
#' ('Nucleus', 'Mitochondrion', 'Chloroplast').
#' @slot category A character string indicating the category of the gene
#' ('Protein-coding', 'Housekeeping', 'Regolative').
#' @slot gene_product A character string representing the product of the gene.
#'
#' @details
#' Additional details:
#' The protoype are:
#' id = NA_real_, Hugo_symbol = NA_character_, description = NA_character_,
#' chrom = NA_character_, start = NA_real_, end = NA_real_,
#' number_exon = NA_real_, location = NA_character_, category = NA_character_,
#' gene_product = NA_character_, strand = NA_character_.
#'
#' The validity function checks the validity of the gene object, ensuring that:
#' \itemize{
#'   \item numeric values are correctly set,
#'   \item the strand is either '+' or '-',
#'   \item the TSS is higher or lower than the TTS based on the correct strand,
#'   \item the location and the chromosome are concordant
#' }
#'
#' @return A \code{Gene} object.
#'
#' @section Author:
#' Elena Sasso \email{elena.sasso@mail.polimi.it}
#'
#' @export
Gene <- setClass("Gene", representation(id = "numeric",
Hugo_symbol = "character",
description = "character", chrom="character",
start = "numeric", end = "numeric",
strand = "character", TSS = "numeric",
TTS = "numeric", number_exon = "numeric",
location = "character", category = "character",
gene_product = "character"),
prototype = list(id = NA_real_, Hugo_symbol = NA_character_,
description = NA_character_, chrom = NA_character_,
start = NA_real_, end = NA_real_,
number_exon = NA_real_, location = NA_character_,
category = NA_character_,
gene_product = NA_character_,
strand = NA_character_),
validity = function(object) {
if (is.na(object@id)) {
return('ERROR: ID required')
}
if (!is.numeric(object@id)) {
return("ID must be a numeric value.")
}
if (!is.numeric(object@start)) {
return("start must be a numeric value.")
}
if (!is.numeric(object@end)) {
return("end must be a numeric value.")
}
if (!is.na(object@start) && !is.na(object@end) &&
(object@end) < (object@start)) {
return("end must be higher than start.")
}
if (!is.na(object@strand) && !(object@strand %in% c("+", "-"))) {
return("strand must be + or -.")
}
if (isTRUE(!is.na(object@strand) && !is.na(object@TSS)
&& !is.na(object@TTS))) {
if (object@strand == '+' && object@TSS >= object@TTS) {
return("Error: if the gene is annotated on the positive strand
the TSS must be lower than the TTS")
}
if (object@strand == '-' && object@TSS <= object@TTS) {
return("Error: if the gene is annotated on the negative strand
the TSS must be higher than the TTS")
}
}
if (!is.numeric(object@number_exon)) {
return("number_exon must be a numeric value.")
}
if (!is.na(object@location) && !(object@location %in%
c("Nucleus", "Mitochondrion",
"Chloroplast"))) {
return("Location must be one of 'Nucleus', 'Mitochondrion', or
'Chloroplast'.")
}
if (!is.na(object@category) && !(object@category %in%
c("Protein-coding", "Housekeeping",
"Regolative"))) {
return("Category must be 'Protein-coding', 'Housekeeping' or
'Regolative'.")
}
if (!is.na(object@location) && object@location == "Mitochondrion"
&& object@chrom != "M") {
return("If location is 'Mitochondrion', chrom must be 'M'.")
}
if (isTRUE(!is.na(object@location) && object@location == "Nucleus"
&& (object@chrom == "M" || object@chrom == "C"))) {
return("If location is 'Nucleus', chrom can't be 'M' or 'C'.")
}
if (!is.na(object@location) && object@location == "Chloroplast"
&& object@chrom != "C") {
return("If location is 'Chloroplast', chrom must be 'C'.")
}
TRUE
},
contains = "VIRTUAL"
)
showMethods(id)
showMethods("id")
